"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface Keyword {
  id: string;
  name: string;
  description?: string;
  isActive: boolean;
  createdAt: string;
  _count: {
    posts: number;
    runs: number;
  };
}

interface ExtractedKeyword {
  name: string;
  relevance: number;
  category: string;
  confidence: "high" | "medium" | "low";
}

interface KeywordExtractionResponse {
  keywords: ExtractedKeyword[];
  extractedAt: string;
  textLength: number;
  aiModel?: string;
  fallback?: boolean;
  error?: string;
}

export default function KeywordsPage() {
  const [keywords, setKeywords] = useState<Keyword[]>([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [showAIExtraction, setShowAIExtraction] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    isActive: true,
  });

  // AI Extraction states
  const [extractionText, setExtractionText] = useState("");
  const [extracting, setExtracting] = useState(false);
  const [extractedKeywords, setExtractedKeywords] = useState<ExtractedKeyword[]>([]);
  const [selectedKeywords, setSelectedKeywords] = useState<Set<string>>(new Set());
  const [maxKeywords, setMaxKeywords] = useState(20);
  const [manualKeyword, setManualKeyword] = useState('');

  useEffect(() => {
    fetchKeywords();
  }, []);

  const fetchKeywords = async () => {
    try {
      setLoading(true);
      const response = await fetch("/api/admin/keywords");
      if (response.ok) {
        const data = await response.json();
        setKeywords(data);
      }
    } catch (error) {
      console.error("Error fetching keywords:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch("/api/admin/keywords", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        setFormData({ name: "", description: "", isActive: true });
        setShowForm(false);
        fetchKeywords();
      }
    } catch (error) {
      console.error("Error creating keyword:", error);
    }
  };

  const handleAIExtraction = async () => {
    if (!extractionText.trim()) return;

    try {
      setExtracting(true);
      const response = await fetch("/api/admin/keywords/extract", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          text: extractionText,
          maxKeywords,
        }),
      });

      if (response.ok) {
        const data: KeywordExtractionResponse = await response.json();
        setExtractedKeywords(data.keywords);
        setSelectedKeywords(new Set());
      } else {
        const errorData = await response.json();
        console.error("AI extraction failed:", errorData);
        // Handle fallback keywords if available
        if (errorData.fallbackKeywords) {
          setExtractedKeywords(errorData.fallbackKeywords);
        }
      }
    } catch (error) {
      console.error("Error extracting keywords:", error);
    } finally {
      setExtracting(false);
    }
  };

  const handleBulkCreate = async () => {
    if (selectedKeywords.size === 0) return;

    try {
      const keywordsToCreate = extractedKeywords
        .filter(kw => selectedKeywords.has(kw.name))
        .map(kw => ({
          name: kw.name,
          description: `AI-extracted keyword (${kw.category}, confidence: ${kw.confidence})`,
          isActive: true,
        }));

      const response = await fetch("/api/admin/keywords/bulk", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          operation: "create",
          keywords: keywordsToCreate,
        }),
      });

      if (response.ok) {
        setExtractedKeywords([]);
        setSelectedKeywords(new Set());
        setExtractionText("");
        setShowAIExtraction(false);
        fetchKeywords();
      }
    } catch (error) {
      console.error("Error creating keywords:", error);
    }
  };

  const toggleKeywordSelection = (keywordName: string) => {
    const newSelected = new Set(selectedKeywords);
    if (newSelected.has(keywordName)) {
      newSelected.delete(keywordName);
    } else {
      newSelected.add(keywordName);
    }
    setSelectedKeywords(newSelected);
  };

  const handleManualAdd = () => {
    if (!manualKeyword.trim()) return;
    
    const newKeyword = {
      name: manualKeyword.trim(),
      relevance: 0.5,
      category: 'manual',
      confidence: 'medium' as const,
      priority: 'medium'
    };
    
    setExtractedKeywords(prev => [...prev, newKeyword]);
    setManualKeyword('');
  };

  const getConfidenceColor = (confidence: string) => {
    switch (confidence) {
      case "high": return "bg-green-100 text-green-800";
      case "medium": return "bg-yellow-100 text-yellow-800";
      case "low": return "bg-red-100 text-red-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Keywords Management</h1>
          <p className="text-muted-foreground">
            Manage keywords for content crawling and curation
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            onClick={() => setShowAIExtraction(!showAIExtraction)}
          >
            ðŸ§  AI Extract Keywords
          </Button>
          <Button onClick={() => setShowForm(!showForm)}>
            {showForm ? "Cancel" : "Add Keyword"}
          </Button>
        </div>
      </div>

      {/* AI Keyword Extraction Interface */}
      {showAIExtraction && (
        <Card>
          <CardHeader>
            <CardTitle>ðŸ§  AI-Powered Keyword Extraction</CardTitle>
            <p className="text-sm text-muted-foreground">
              Paste up to 5,000 characters of text to extract relevant keywords using AI
            </p>
          </CardHeader>
          <CardContent className="space-y-6">
            <div>
              <Label htmlFor="extraction-text">Content Text</Label>
              <Textarea
                id="extraction-text"
                data-testid="kw-input"
                value={extractionText}
                onChange={(e) => setExtractionText(e.target.value)}
                placeholder="Paste your content here... (up to 5,000 characters)"
                className="min-h-[200px]"
                maxLength={5000}
              />
              <div className="flex justify-between items-center mt-2">
                <p className="text-sm text-muted-foreground" data-testid="kw-char-counter">
                  {extractionText.length}/5,000 characters
                </p>
                <div className="flex items-center gap-2">
                  <Label htmlFor="max-keywords" className="text-sm">Max Keywords:</Label>
                  <Select value={maxKeywords.toString()} onValueChange={(value) => setMaxKeywords(parseInt(value))}>
                    <SelectTrigger className="w-20">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="10">10</SelectItem>
                      <SelectItem value="15">15</SelectItem>
                      <SelectItem value="20">20</SelectItem>
                      <SelectItem value="30">30</SelectItem>
                      <SelectItem value="50">50</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>

            <div className="flex gap-2">
              <Button 
                data-testid="kw-extract-btn"
                onClick={handleAIExtraction} 
                disabled={!extractionText.trim() || extracting || extractionText.length > 5000}
                className="flex items-center gap-2"
              >
                {extracting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" data-testid="kw-progress"></div>
                    Extracting...
                  </>
                ) : (
                  <>
                    ðŸš€ Extract Keywords
                  </>
                )}
              </Button>
              
              {extractedKeywords.length > 0 && (
                <Button 
                  data-testid="kw-save"
                  onClick={handleBulkCreate} 
                  disabled={selectedKeywords.size === 0}
                  variant="default"
                >
                  Create Selected ({selectedKeywords.size})
                </Button>
              )}
            </div>

            {/* Extracted Keywords Display */}
            {extractedKeywords.length > 0 && (
              <div className="space-y-4" data-testid="kw-suggestions">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">Extracted Keywords</h3>
                  <div className="flex gap-2">
                    <Button 
                      data-testid="kw-select-all"
                      variant="outline" 
                      size="sm"
                      onClick={() => setSelectedKeywords(new Set(extractedKeywords.map(kw => kw.name)))}
                    >
                      Select All
                    </Button>
                    <Button 
                      data-testid="kw-deselect-all"
                      variant="outline" 
                      size="sm"
                      onClick={() => setSelectedKeywords(new Set())}
                    >
                      Clear All
                    </Button>
                  </div>
                </div>
                
                {/* Manual Keyword Addition */}
                <div className="flex gap-2 items-center">
                  <Input
                    data-testid="kw-add-manual"
                    placeholder="Add custom keyword..."
                    value={manualKeyword}
                    onChange={(e) => setManualKeyword(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleManualAdd()}
                  />
                  <Button 
                    onClick={handleManualAdd}
                    disabled={!manualKeyword.trim()}
                    size="sm"
                  >
                    Add
                  </Button>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                  {extractedKeywords.map((keyword, index) => (
                    <div
                      key={index}
                      data-testid="kw-card"
                      className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                        selectedKeywords.has(keyword.name)
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => toggleKeywordSelection(keyword.name)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h4 className="font-medium text-sm">{keyword.name}</h4>
                          <p className="text-xs text-muted-foreground mt-1" data-testid="kw-category">{keyword.category}</p>
                          <p className="text-xs text-muted-foreground" data-testid="kw-priority">Priority: {keyword.priority || 'medium'}</p>
                        </div>
                        <div className="flex flex-col items-end gap-1">
                          <Badge className={`text-xs ${getConfidenceColor(keyword.confidence)}`} data-testid="kw-confidence">
                            {keyword.confidence}
                          </Badge>
                          <span className="text-xs text-muted-foreground" data-testid="kw-relevance">
                            {(keyword.relevance * 100).toFixed(0)}%
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Manual Keyword Creation Form */}
      {showForm && (
        <Card>
          <CardHeader>
            <CardTitle>Add New Keyword</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <Label htmlFor="name">Keyword Name</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  placeholder="e.g., artificial intelligence"
                  required
                />
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="Optional description of the keyword"
                />
              </div>
              <div className="flex items-center space-x-2">
                <Switch
                  id="isActive"
                  checked={formData.isActive}
                  onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}
                />
                <Label htmlFor="isActive">Active</Label>
              </div>
              <Button type="submit">Create Keyword</Button>
            </form>
          </CardContent>
        </Card>
      )}

      {/* Keywords List */}
      {loading ? (
        <div className="text-center py-8">Loading keywords...</div>
      ) : keywords.length === 0 ? (
        <Card>
          <CardContent className="py-8 text-center">
            <h3 className="text-lg font-medium text-muted-foreground mb-2">
              No keywords found
            </h3>
            <p className="text-sm text-muted-foreground mb-4">
              Create your first keyword to start content crawling
            </p>
            <Button onClick={() => setShowAIExtraction(true)} variant="outline">
              ðŸ§  Try AI Keyword Extraction
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4">
          {keywords.map((keyword) => (
            <Card key={keyword.id}>
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="space-y-1">
                    <CardTitle className="text-lg">{keyword.name}</CardTitle>
                    <div className="flex items-center gap-2">
                      <Badge variant={keyword.isActive ? "default" : "secondary"}>
                        {keyword.isActive ? "Active" : "Inactive"}
                      </Badge>
                      <Badge variant="outline">{keyword._count.posts} posts</Badge>
                      <Badge variant="outline">{keyword._count.runs} runs</Badge>
                    </div>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {keyword.description && (
                  <p className="text-muted-foreground">{keyword.description}</p>
                )}
                <p className="text-sm text-muted-foreground mt-2">
                  Created: {new Date(keyword.createdAt).toLocaleDateString()}
                </p>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}