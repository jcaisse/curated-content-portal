name: curated-content-portal

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: curated-content-postgres
    env_file:
      - ./.secrets/.env.local
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-app}"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
    restart: unless-stopped
    networks:
      - curated-network

  migrate:
    image: ${APP_IMAGE:-cleanportal-app:latest}
    container_name: curated-content-migrate
    env_file:
      - ./.secrets/.env.local
    depends_on:
      db:
        condition: service_healthy
    user: "0:0"
    command: >
      /bin/sh -lc "
        echo 'Waiting for database to be ready...' &&
        if [ -f /var/lib/postgresql/data/PG_VERSION ]; then
          echo 'DB volume present. POSTGRES_* env will NOT change existing password.';
        fi;
        echo 'Running Prisma migrations...' &&
        node node_modules/.bin/prisma migrate deploy &&
        echo 'Running database seed...' &&
        node prisma/seed.mjs &&
        echo 'Running auth fingerprint check...' &&
        node scripts/auth-fingerprint-check.mjs &&
        echo 'Running database smoke test...' &&
        node scripts/db-smoke.mjs &&
        echo 'Migrations, seed, fingerprint check, and smoke test completed successfully'
      "
    restart: "no"
    networks:
      - curated-network

  app:
    image: ${APP_IMAGE:-cleanportal-app:latest}
    container_name: curated-content-app
    env_file:
      - ./.secrets/.env.local
    depends_on:
      migrate:
        condition: service_completed_successfully
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - curated-network

  scheduler:
    image: ${APP_IMAGE:-cleanportal-app:latest}
    container_name: curated-content-scheduler
    env_file:
      - ./.secrets/.env.local
    depends_on:
      db:
        condition: service_healthy
    command: node scripts/scheduler.mjs
    restart: unless-stopped
    networks:
      - curated-network

  redis:
    image: redis:7-alpine
    container_name: curated-content-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - curated-network

volumes:
  db-data:
  redis_data:

networks:
  curated-network:
    driver: bridge
