#!/usr/bin/env node

import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import crypto from 'crypto';

const envFilePath = join(process.cwd(), '.secrets', '.env.local');
const nodeEnv = process.env.NODE_ENV || 'development';

function validatePasswordStrength(password, env, name) {
  if (env === 'development') {
    return password.length >= 8;
  }
  
  // Production/Staging: Strong password requirements
  if (password.length < 20) return false;
  
  const hasUpper = /[A-Z]/.test(password);
  const hasLower = /[a-z]/.test(password);
  const hasNumber = /[0-9]/.test(password);
  const hasSymbol = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`]/.test(password);
  
  return hasUpper && hasLower && hasNumber && hasSymbol;
}

function validateSecretStrength(secret, name, minLength = 32) {
  if (secret.length < minLength) {
    console.error(`‚ùå ${name} must be at least ${minLength} characters`);
    return false;
  }
  
  // Check for common weak patterns
  const weakPatterns = [
    /^[a-z]+$/i, // Only letters
    /^[0-9]+$/, // Only numbers
    /^(.)\1+$/, // All same character
    /password|secret|key|token|admin|test/i, // Common weak words
  ];
  
  for (const pattern of weakPatterns) {
    if (pattern.test(secret)) {
      console.error(`‚ùå ${name} appears to be weak (matches pattern: ${pattern})`);
      return false;
    }
  }
  
  return true;
}

function checkEnv() {
  console.log(`üîç Checking environment configuration for ${nodeEnv}...`);

  if (!existsSync(envFilePath)) {
    console.error('‚ùå Environment file not found: .secrets/.env.local');
    console.log('üí° Run: npm run env:bootstrap');
    process.exit(1);
  }

  // Read and parse env file
  const envContent = readFileSync(envFilePath, 'utf8');
  const env = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim().replace(/^["']|["']$/g, '');
      }
    }
  });

  // Required variables
  const requiredVars = [
    'POSTGRES_USER',
    'POSTGRES_PASSWORD', 
    'POSTGRES_DB',
    'DATABASE_URL',
    'NEXTAUTH_URL',
    'NEXTAUTH_SECRET',
    'ADMIN_EMAIL',
    'ADMIN_PASSWORD',
    'ADMIN_INGEST_KEY'
  ];

  let hasErrors = false;
  let hasWarnings = false;

  // Check required variables
  for (const varName of requiredVars) {
    if (!env[varName]) {
      const message = `‚ùå Required environment variable is missing: ${varName}`;
      if (nodeEnv === 'development') {
        console.warn(`‚ö†Ô∏è  ${message}`);
        hasWarnings = true;
      } else {
        console.error(message);
        hasErrors = true;
      }
      continue;
    }

    // Check for placeholder values
    if (env[varName].includes('<') || env[varName].includes('>')) {
      const message = `‚ùå Environment variable contains placeholder: ${varName}`;
      if (nodeEnv === 'development') {
        console.warn(`‚ö†Ô∏è  ${message}`);
        hasWarnings = true;
      } else {
        console.error(message);
        hasErrors = true;
      }
    }
  }

  // Validate password strength
  if (env.POSTGRES_PASSWORD && !validatePasswordStrength(env.POSTGRES_PASSWORD, nodeEnv, 'POSTGRES_PASSWORD')) {
    const message = '‚ùå POSTGRES_PASSWORD does not meet strength requirements';
    if (nodeEnv === 'development') {
      console.warn(`‚ö†Ô∏è  ${message}`);
      hasWarnings = true;
    } else {
      console.error(message);
      hasErrors = true;
    }
  }

  if (env.ADMIN_PASSWORD && !validatePasswordStrength(env.ADMIN_PASSWORD, nodeEnv, 'ADMIN_PASSWORD')) {
    const message = '‚ùå ADMIN_PASSWORD does not meet strength requirements';
    if (nodeEnv === 'development') {
      console.warn(`‚ö†Ô∏è  ${message}`);
      hasWarnings = true;
    } else {
      console.error(message);
      hasErrors = true;
    }
  }

  // Validate secret strength
  if (env.NEXTAUTH_SECRET && !validateSecretStrength(env.NEXTAUTH_SECRET, 'NEXTAUTH_SECRET')) {
    const message = '‚ùå NEXTAUTH_SECRET does not meet strength requirements';
    if (nodeEnv === 'development') {
      console.warn(`‚ö†Ô∏è  ${message}`);
      hasWarnings = true;
    } else {
      console.error(message);
      hasErrors = true;
    }
  }

  if (env.ADMIN_INGEST_KEY && !validateSecretStrength(env.ADMIN_INGEST_KEY, 'ADMIN_INGEST_KEY')) {
    const message = '‚ùå ADMIN_INGEST_KEY does not meet strength requirements';
    if (nodeEnv === 'development') {
      console.warn(`‚ö†Ô∏è  ${message}`);
      hasWarnings = true;
    } else {
      console.error(message);
      hasErrors = true;
    }
  }

  // Check DATABASE_URL format
  if (env.DATABASE_URL && !env.DATABASE_URL.startsWith('postgresql://')) {
    const message = '‚ùå DATABASE_URL must be a PostgreSQL connection string';
    console.error(message);
    hasErrors = true;
  }

  // Summary
  if (hasErrors) {
    console.log('\n‚ùå Environment validation failed');
    process.exit(1);
  } else if (hasWarnings) {
    console.log('\n‚ö†Ô∏è  Environment validation passed with warnings (development mode)');
  } else {
    console.log('\n‚úÖ Environment validation passed');
  }

  console.log('üîí All secrets are properly configured');
}

checkEnv();
