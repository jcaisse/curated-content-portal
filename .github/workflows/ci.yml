name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      docker:
        image: docker:24.0.9-dind
        privileged: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci

      - name: Install Playwright Browsers
        run: |
          npx playwright install --with-deps

      - name: Prepare .secrets env
        run: |
          mkdir -p .secrets
          cat > .secrets/.env.local <<'EOF'
          DATABASE_URL=postgresql://postgres:postgres@db:5432/curated_content_portal?schema=public
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB=curated_content_portal
          POSTGRES_PORT=5432
          APP_PORT=3000
          NODE_ENV=production
          NEXTAUTH_URL=http://localhost:3000
          NEXTAUTH_SECRET=dev-secret-please-change
          OPENAI_API_KEY=
          ADMIN_EMAIL=admin@example.com
          ADMIN_PASSWORD=adminadmin
          DOMAIN=localhost
          EMAIL=local@example.com
          AI_DISABLED=true
          ADMIN_INGEST_KEY=dev-ingest-key
          RSS_FEED_URLS=https://example.com/feed1.xml
          WEB_CRAWL_ENABLED=false
          CRAWL_INTERVAL_HOURS=24
          FILE_STORAGE_STRATEGY=url_only
          MAX_CRAWL_ITEMS_PER_RUN=25
          CONTENT_REVIEW_THRESHOLD=0.7
          AUTO_PUBLISH_ENABLED=false
          RATE_LIMIT_REQUESTS_PER_MINUTE=60
          RATE_LIMIT_BURST=10
          ANALYTICS_ENABLED=false
          BCRYPT_ROUNDS=10
          SESSION_MAX_AGE=86400
          LOG_LEVEL=info
          REDIS_URL=redis://localhost:6379
          PORT=3000
          EOF

      - name: Build app image
        run: |
          docker build -t cleanportal-app:ci .

      - name: Start DB
        run: |
          docker compose --env-file ./.secrets/.env.local up -d db
          for i in {1..60}; do
            if docker inspect -f '{{json .State.Health.Status}}' curated-content-postgres | grep -q healthy; then echo DB healthy; break; fi; sleep 2; done

      - name: Run migrations + seed
        run: |
          docker compose --env-file ./.secrets/.env.local up migrate

      - name: Start app
        run: |
          docker compose --env-file ./.secrets/.env.local up -d app
          for i in {1..60}; do
            if curl -sf http://localhost:3000/api/health >/dev/null; then echo App healthy; break; fi; sleep 2; done

      - name: Run headless Playwright tests
        env:
          E2E_ADMIN_EMAIL: admin@example.com
          E2E_ADMIN_PASSWORD: adminadmin
        run: |
          npx playwright test --reporter=line --workers=2

      - name: Compose logs on failure
        if: failure()
        run: |
          docker compose logs --tail=300 db migrate app || true

name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  preflight:
    name: Preflight Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run preflight checks
      run: |
        echo "🔒 Running preflight checks..."
        npm run ci:preflight
        echo "✅ Preflight checks passed!"

  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: preflight
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        build-args: |
          GIT_COMMIT_SHA=${{ github.sha }}
        tags: |
          cleanportal-app:latest
          cleanportal-app:sha-${{ github.sha }}
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify image labels
      run: |
        echo "🔍 Verifying image labels..."
        IMAGE_REVISION=$(docker inspect cleanportal-app:latest --format '{{index .Config.Labels "org.opencontainers.image.revision"}}')
        echo "Image revision: $IMAGE_REVISION"
        echo "Expected revision: ${{ github.sha }}"
        if [ "$IMAGE_REVISION" != "${{ github.sha }}" ]; then
          echo "❌ Image revision mismatch"
          exit 1
        fi
        echo "✅ Image labels verified"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-image
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create environment file
      run: |
        mkdir -p .secrets
        cat > .secrets/.env.ci <<'EOF'
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=app
        DATABASE_URL=postgresql://postgres:postgres@db:5432/app?schema=public
        NEXTAUTH_URL=http://localhost:3000
        AUTH_URL=http://localhost:3000
        AUTH_TRUST_HOST=true
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET || 'dev-secret-32-characters-long' }}
        AUTH_SECRET=${{ secrets.AUTH_SECRET || 'dev-secret-32-characters-long' }}
        ADMIN_EMAIL=admin@example.com
        ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD || 'TestPassword123!' }}
        ADMIN_INGEST_KEY=${{ secrets.ADMIN_INGEST_KEY || 'test-ingest-key-32-characters' }}
        AI_DISABLED=true
        NODE_ENV=test
        APP_PORT=3000
        EOF

    - name: Load Docker image
      run: |
        docker load < <(docker save cleanportal-app:latest | gzip)

    - name: Start services
      run: |
        docker compose --env-file ./.secrets/.env.ci up -d --force-recreate
        echo "⏳ Waiting for services to be ready..."
        sleep 30

    - name: Check service health
      run: |
        echo "🔍 Checking service health..."
        docker compose logs migrate --no-log-prefix
        docker compose logs app --no-log-prefix
        
        # Wait for app to be healthy
        timeout 60 bash -c 'until docker compose ps app | grep -q "healthy"; do sleep 2; done'
        echo "✅ Services are healthy"

    - name: Verify image is running
      run: |
        echo "🔍 Verifying running image matches build..."
        RUNNING_IMAGE=$(docker compose ps app --format "{{.Image}}" | head -1)
        echo "Running image: $RUNNING_IMAGE"
        
        # Check if the image has our commit SHA
        IMAGE_REVISION=$(docker inspect $RUNNING_IMAGE --format '{{index .Config.Labels "org.opencontainers.image.revision"}}')
        echo "Running image revision: $IMAGE_REVISION"
        echo "Expected revision: ${{ github.sha }}"
        
        if [ "$IMAGE_REVISION" != "${{ github.sha }}" ]; then
          echo "❌ Running image revision mismatch"
          exit 1
        fi
        echo "✅ Running image matches build"

    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        docker compose --env-file ./.secrets/.env.ci exec -T app npm run test

    - name: Install Playwright
      run: |
        echo "📦 Installing Playwright..."
        docker compose --env-file ./.secrets/.env.ci exec -T app npx playwright install --with-deps

    - name: Run database migrations
      run: |
        echo "🗄️  Running database migrations..."
        docker compose --env-file ./.secrets/.env.ci exec -T app node node_modules/.bin/prisma migrate deploy

    - name: Run auth smoke test
      run: |
        echo "🧪 Running auth smoke test..."
        docker compose --env-file ./.secrets/.env.ci exec -T app npm run auth:smoke

    - name: Run E2E tests
      run: |
        echo "🎭 Running E2E tests..."
        docker compose --env-file ./.secrets/.env.ci exec -T app npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          playwright-report/
          test-results/
        retention-days: 30

    - name: Cleanup
      if: always()
      run: |
        docker compose down --volumes

  release:
    name: Release to Registry
    runs-on: ubuntu-latest
    needs: [preflight, build-image, integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        build-args: |
          GIT_COMMIT_SHA=${{ github.sha }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "📦 Released image tags:"
        echo "${{ steps.meta.outputs.tags }}"
        echo "🏷️  Image labels:"
        echo "${{ steps.meta.outputs.labels }}"