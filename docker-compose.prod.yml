services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: curated-content-portal
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - curated-network
    volumes:
      - app-data:/app/data

  postgres:
    image: pgvector/pgvector:pg16
    container_name: curated-content-postgres
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-curated_content_portal}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - curated-network

  redis:
    image: redis:7-alpine
    container_name: curated-content-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - curated-network

volumes:
  postgres_data:
  redis_data:
  app-data:

networks:
  curated-network:
    driver: bridge
